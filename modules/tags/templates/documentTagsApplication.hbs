<div class="tags">
  <div class="tag-container">
    {{#if documentTags}}
      {{#each documentTags}}
        <div
          class="tag"
          draggable="true"
          ondragover="allowDrop(event)"
          ondragstart="drag(event)"
          ondrop="drop(event)"
          ondragenter="dragEnter(event)"
          ondragleave="dragLeave(event)"
        >
          <span class="text">{{this}}</span>
          <a class="icon">
            <i class="fas fa-times" data-index="{{@index}}"></i>
          </a>
        </div>
      {{/each}}
    {{/if}}
    <input
      class="tag-input"
      autofocus
      placeholder="{{localize "tags.editor.placeholder"}}"
      />
  </div>
  <span class="actions">
    <button class="cancel">
      <i class="fas fa-times"></i>{{localize "tags.editor.actions.cancel"}}
    </button>
    <button class="save">
      <i class="fas fa-check"></i>{{localize "tags.editor.actions.save"}}
    </button>
  </span>
</div>

{{!-- <script>
  let draggedElement;

  function dragEnter(event) {
    event.preventDefault();

    let target = event.target.closest(".tag");
    if (target && draggedElement !== target) {
      target.classList.add("on-drag");
    }
  }

  function dragLeave(event) {
    event.preventDefault();

    let target = event.target.closest(".tag");
    if (target && draggedElement !== target && !target.contains(event.relatedTarget)) {
      target.classList.remove("on-drag");
    }
  }

  function allowDrop(event) {
    event.preventDefault();
  }

  function drag(event) {
    draggedElement = event.target;
  }

  function drop(event) {
    event.preventDefault();

    const target = event.target.closest(".tag");

    if (target && draggedElement !== target) {
      const allTags = document.querySelectorAll(".tag-container .tag");
      const draggedIndex = Array.from(allTags).indexOf(draggedElement);
      const droppedIndex = Array.from(allTags).indexOf(target);

      if (draggedIndex < droppedIndex) {
        target.parentNode.insertBefore(draggedElement, target.nextSibling);
      } else {
        target.parentNode.insertBefore(draggedElement, target);
      }

      target.classList.remove("on-drag");
    }
  }
</script> --}}
